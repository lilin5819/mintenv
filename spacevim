" You can enable the existing layers in space-vim and
" exclude the partial plugins in a certain layer.
" The command Layer is vaild in the function Layers().
" Use exclude option if you don't want the full Layer,
" e.g., Layer 'better-defaults', { 'exclude': 'itchyny/vim-cursorword' }
function! Layers()

  " Default layers, recommended!
  Layer 'fzf'
  Layer 'unite'
  Layer 'better-defaults'

  Layer 'editing'
  Layer 'programming'
  Layer 'c-c++'
  Layer 'syntax-checking'
  Layer 'auto-completion'
  "Layer 'ycmd'
  Layer 'code-snippets'
  Layer 'deoplete'
  Layer 'markdown'
  Layer 'javascript'
  Layer 'python'
  Layer 'chinese'
  Layer 'airline'
  Layer 'git'
  Layer 'github'
  Layer 'ctrlp'
  Layer 'file-manager'
  Layer 'lightline'
  Layer 'text-align'
  Layer 'better-motion'

endfunction

" Put your private plugins here.
function! UserInit()

  " Space has been set as the default leader key,
  " if you want to change it, uncomment and set it here.
  " let g:spacevim_leader = "<\Space>"
  " let g:spacevim_localleader = ','
   set undofile
   set undodir="~/.vimundo"
   set undolevels=1000

  " Install private plugins
  " Plug 'extr0py/oni'

   Plug 'Shougo/denite.nvim'
   Plug 'chemzqm/vim-easygit'
   Plug 'chemzqm/denite-git'

   Plug 'hecal3/vim-leader-guide'
   Plug 'bling/vim-bufferline'

   let g:mouse_a=1
   let g:list_show=0

   function MouseToggle()
        if g:mouse_a==0
            let g:mouse_a=1
            set mouse=a
            echo "set mouse=a \"现在你可以用鼠标交互."
        else
            let g:mouse_a=0
            set mouse=c
            echo "set mouse=c \"现在你可以复制文字."
        endif
   endfunction

   function ListToggle()
        if g:list_show==0
            let g:list_show=1
            set list
            " set listchars=tab:\│\ ,trail:•,extends:#,nbsp:· " Highlight problematic whitespace, tab: ›"
            echo "set list \"显示符号."
        else
            let g:list_show=0
            set nolist
            echo "set nolist \"不显示符号."
        endif
    endfunction



endfunction

" Put your costom configurations here, e.g., change the colorscheme.
function! UserConfig()

  " If you enable airline layer and have installed the powerline fonts, set it here.
   let g:airline_powerline_fonts=1
  " color molokai
  " color desert

   nnoremap <silent> <space> :<C-u>LeaderGuide mapleader<CR>
   nnoremap ; :
   autocmd FileType c,cpp setlocal
              \ tabstop=4
              \ shiftwidth=4
              \ softtabstop=4

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " cscope setting
    " """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    if has("cscope")
        set csprg=/usr/bin/cscope
        set csto=1
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        endif
        set csverb
    endif

    nnoremap .u          :AsyncRun find .  -name "*.[Sch]" -a -type f > cscope.files ; ctags -R ; cscope -Rbkq ; cscope reset<CR>
    nnoremap .. :cs find 
    nnoremap .s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nnoremap .g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap .c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap .t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nnoremap .e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nnoremap .f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nnoremap .i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nnoremap .d :cs find d <C-R>=expand("<cword>")<CR><CR>

    nnoremap .l :call ListToggle()<CR>
    nnoremap .m :call MouseToggle()<CR>
endfunction
